#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'dynssh' \
    'dynssh'
  _check_cmd \
    'android-vnc-viewer' \
    'android-vnc-viewer'
}

# shellcheck disable=SC2034
_global_variables() {
  view_date=""
  target_host=""
  camera_app=""
  viewer_app=""
  view_length=""
  view_resolution=""
  display_dim=""
  remote_port=""
  local_port=""
  color=""
  quiet=""
}

_dynssh_options(){
  _dynssh_opts+=(
    -t
      "${_target_host}"
    -l
      "${_local_port}"
    -r
      "${_remote_port}"
  )
}

_android-camera_options(){
  _camera+=(
    android-camera
  )
  _camera_opts+=(
    -l
      "${_length}" 
    -d
    -t
  )
}

_android-vnc-viewer_options(){
  _viewer+=(
    "${_viewer_app}"
  )
  if [[ "${_dim}" == "y" ]]; then
    _viewer_opts+=(
      -d
    )
  fi
  _viewer_opts+=(
    -l
      "${_length}" 
  )
}

# Remote camera.
# $1: target host camera
# $2: camera app
# $2: viewer app
_android_remote_camera() {
  local \
    _target_host="${1}" \
    _camera_app="${2}" \
    _viewer_app="${3}" \
    _length="${4}" \
    _resolution="${5}" \
    _dim="${6}" \
    _local_port="${7}" \
    _remote_port="${8}" \
    _camera_opts=() \
    _camera=() \
    _viewer=() \
    _viewer_opts=() \
    _dynssh_opts=() \
    _tmp
  if [[ "${quiet}" != "y" ]]; then
    _camera_opts+=(
      -v
    )
    _dynssh_opts+=(
      -v
    )
    _viewer_opts+=(
      -v
    )
  fi
  _dynssh_options
  "_${_camera_app}_options"
  "_${_viewer_app}_options"
  _msg_info \
    "running dynssh with '${_dynssh_opts[*]}'"
  _run \
    "viewer" \
    0 \
    async \
    "${_viewer[@]}" \
      "${_viewer_opts[@]}" || \
  true
  dynssh \
    "${_dynssh_opts[@]}" -- \
    "${_target_host}" \
    "${_camera[@]}" \
      "${_camera_opts[@]}"
  _msg_info \
    "remote camera closed."
  wait \
    "$(_get_pid \
      "viewer")"
  _msg_info \
    "viewing ended, quitting."
}

_resolution_auto_detect() {
  local \
    _resolution
  if [[ $(command -v 'sudo') != "" ]]; then
    _resolution="$( \
      sudo \
        wm \
          size | \
        tail \
          -n \
          1 | \
	  awk \
	    '{print $3}')"
  else
    _resolution='720x1280'
  fi
  echo \
    "${_resolution}"
}

# Set defaults and, if present, overrides
# from program command line option parameters
_set_overrides() {
  _set_override \
    "target" \
    "host" \
    ""
  _set_override \
    "view" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "camera" \
    "app" \
    "android-camera"
  _set_override \
    "view" \
    "resolution" \
    "$(_resolution_auto_detect)" 
  _set_override \
    "viewer" \
    "app" \
    "android-vnc-viewer"
  _set_override \
    "view" \
    "length" \
    "$(( 10 * 60 ))" # 10 minutes
  _set_override \
    "local" \
    "port" \
    "59111"
  _set_override \
    "remote" \
    "port" \
    "59001"
  _set_override \
    "display" \
    "dim" \
    "n"
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                View date:   $(_get "view" "date")"
  _msg_info "              Target host:   $(_get "target" "host")"
  _msg_info "               Camera app:   $(_get "camera" "app")"
  _msg_info "               Viewer app:   $(_get "viewer" "app")"
  _msg_info "               Resolution:   $(_get "view" "resolution")"
  _msg_info "              View length:   $(_get "view" "length")"
  _msg_info "               Local port:   $(_get "local" "port")"
  _msg_info "              Remote port:   $(_get "remote" "port")"
  _msg_info "              Dim display:   $(_get "display" "dim")"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Android remote camera.

Usage:
  $(_get "app" "name")
    [options]
  options:
     -t <target_host>     Target host.
                          Default: $(_get "target" "host")
     -a <camera_app>      Camera application to use.
                          Default: $(_get "camera" "app")
     -w <viewer_app>      Viewer application to use.
                          Default: $(_get "viewer" "app")
     -s <widthxheight>    Resolution.
                          Default: $(_get "view" "resolution")
     -L <length>          Length of the view.
                          Default: $(_get "view" "length").
     -d                   Dim display.
     -l <local_port>      Local VNC viewer port.
                          Default: $(_get "local" "port").
     -r <remote_port>     Remote VNC port.
                          Default: $(_get "remote" "port").
     -h                   This message.
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    't:a:w:L:s:dl:r:cvh?' \
    arg; do
  case \
    "${arg}" in
    t) override_target_host="${OPTARG}" ;;
    a) override_camera_app="${OPTARG}" ;;
    w) override_viewer_app="${OPTARG}" ;;
    L) override_view_length="${OPTARG}" ;;
    s) override_view_resolution="${OPTARG}" ;;
    d) override_display_dim="y" ;;
    l) override_local_port="${OPTARG}" ;;
    r) override_remote_port="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
if [[ "${target_host}" == "" ]]; then
  _msg_error \
    "You must specify a -t <target> option."
fi
_config_user_init \
  "$(_get "app" "name")"
_show_config
app_opts=(
  "${target_host}"
  "${camera_app}"
  "${viewer_app}"
  "${view_length}"
  "${view_resolution}"
  "${display_dim}"
  "${local_port}"
  "${remote_port}"
)
_android_remote_camera \
  "${app_opts[@]}"
